@page "/login"

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ApiAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject PendingCartService PendingCartService
@inject ICartApiService CartApi

@using ShopEase.Client.Data
@using System.ComponentModel.DataAnnotations

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" @bind-Value="loginModel.Username" class="form-control" aria-required="true"
            aria-label="Username" aria-describedby="usernameHelp" autocomplete="username" />
        <div id="usernameHelp" class="form-text">Enter your username.</div>
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" @bind-Value="loginModel.Password" class="form-control"
            type="@(_showPassword ? "text" : "password")" aria-required="true" aria-label="Password"
            autocomplete="current-password" />
        <button type="button" class="btn btn-link p-0 ms-2" @onclick="ToggleShowPassword"
            aria-label="@(_showPassword ? "Hide password" : "Show password")" tabindex="0">
            @(_showPassword ? "Hide" : "Show")
        </button>
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary" aria-label="Login" id="loginBtn">
            Login
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert" aria-live="assertive">@errorMessage</div>
    }
</EditForm>

@code {
    private LoginModel loginModel = new();
    private bool _showPassword = false;
    private string errorMessage;
    private string returnUrl;

    protected override void OnInitialized()
    {
        // Parse returnUrl from query string if present
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"] ?? "/";
    }

    private void ToggleShowPassword()
    {
        _showPassword = !_showPassword;
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var jwt = await response.Content.ReadAsStringAsync();
                var token = jwt.Trim('"');

                await LocalStorage.SetItemAsync("authToken", token);
                AuthStateProvider.MarkUserAsAuthenticated(token);
                Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                Navigation.NavigateTo("/");

                // Check if there is a pending cart action
                var pendingProductId = PendingCartService.TakePending();
                if (pendingProductId.HasValue)
                {
                    await AddToCart(pendingProductId.Value);
                    Navigation.NavigateTo("/cart");
                }
                else
                {
                    Navigation.NavigateTo(returnUrl);
                }
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch
        {
            errorMessage = "An error occurred while logging in. Please try again.";
        }
    }

    private async Task AddToCart(int productId)
    {
        var cartItem = new CartItem
        {
            ProductID = productId,
            Quantity = 1
            // No need for UserID, as the backend knows the user from the JWT!
        };
        await CartApi.AddToCartAsync(cartItem);
        // Optional: handle error cases if you want
    }


    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
