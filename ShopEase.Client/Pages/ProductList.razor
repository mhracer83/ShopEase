@page "/productcatalog"
<Toast Message="@toastMessage" Show="@showToast" />

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject PendingCartService PendingCartService
@inject NavigationManager Nav

<button @onclick="@(() => Nav.NavigateTo("/cart"))" class="catalog-nav-btn" aria-label="Go to Cart">
    ðŸ›’ View Cart
</button>

@using ShopEase.Client.Data
@using ShopEase.Client.Components
@inject ShopEase.Client.Data.IProductApiService ProductApi
@inject ShopEase.Client.Data.ICartApiService CartApi


<h3>Product Catalog</h3>

@if (products is null)
{
    <p><em>Loading...</em></p>
}
else if (!products.Any())
{
    <p>No products found.</p>
}
else
{
    <div class="product-list">
        @foreach (var product in products)
        {
            <ProductCard Product="product" OnAddToCart="@(p => AddToCart(p))" />
        }
    </div>
}

@code {
    private List<ShopEase.Client.Data.Product> products;

    // Toast notification logic
    private bool showToast;
    private string toastMessage;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductApi.GetProductCatalogAsync();
    }

    private async Task AddToCart(Product product)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            var cartItem = new CartItem
            {
                // Replace this with actual UserID logic, or let your API handle user association by JWT
                ProductID = product.ProductID,
                Quantity = 1
            };
            await CartApi.AddToCartAsync(cartItem);

            // Show toast
            toastMessage = $"{product.Name} added to cart!";
            showToast = true;
            StateHasChanged();

            // Hide after 2.5 seconds
            await Task.Delay(2500);
            showToast = false;
            StateHasChanged();
        }
        else
        {
            // Save the intended product for after login
            PendingCartService.SetPending(product.ProductID);
            // Optionally, encode the returnUrl so you can come back here
            Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}");
        }
    }
}