@page "/cart"
@inject ShopEase.Client.Data.ICartApiService CartApi

<h3>Your Cart</h3>

@if (cartItems == null)
{
    <p><em>Loading...</em></p>
}
else if (!cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>@item.Product?.Name</td>
                    <td>@item.Product?.Category</td>
                    <td>@item.Product?.Price.ToString("C")</td>
                    <td>@item.Quantity</td>
                    <td>
                        <button @onclick="() => Remove(item.CartItemID)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <strong>Total: </strong> $@cartItems.Sum(x => x.Product?.Price * x.Quantity ?? 0)
    </p>
}

@code {
    private List<ShopEase.Client.Data.CartItem> cartItems;
    private int userId = 1; // Use a hardcoded user ID for now; later use authentication

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartApi.GetCartItemsAsync(userId);
    }

    private async Task Remove(int cartItemId)
    {
        await CartApi.RemoveFromCartAsync(cartItemId);
        cartItems = await CartApi.GetCartItemsAsync(userId);
        StateHasChanged();
    }
}
