@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" @bind-Value="registerModel.Username" class="form-control" aria-required="true"
            aria-label="Username" autocomplete="username" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" @bind-Value="registerModel.Email" type="email" class="form-control" aria-required="true"
            aria-label="Email" autocomplete="email" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control"
            aria-required="true" aria-label="Password" autocomplete="new-password" />
        <div class="form-text" id="passwordHelp">
            Must be at least 8 characters, contain upper and lower case letters, and at least one digit.
        </div>
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control"
            aria-required="true" aria-label="Confirm Password" autocomplete="new-password" />
    </div>

    <button type="submit" class="btn btn-primary" aria-label="Register">Register</button>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3" role="alert" aria-live="assertive">@error</div>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string error;

    private async Task RegisterUser()
    {
        error = null;
        var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            error = await response.Content.ReadAsStringAsync();
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [MinLength(4, ErrorMessage = "Username must be at least 4 characters.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters.")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$",
        ErrorMessage = "Password must contain upper and lower case letters and at least one digit.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Please confirm your password.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
